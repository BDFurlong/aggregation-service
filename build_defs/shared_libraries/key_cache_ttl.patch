diff --git a/java/com/google/scp/operator/cpio/cryptoclient/Annotations.java b/java/com/google/scp/operator/cpio/cryptoclient/Annotations.java
index b4b52bb..b3148ff 100644
--- a/java/com/google/scp/operator/cpio/cryptoclient/Annotations.java
+++ b/java/com/google/scp/operator/cpio/cryptoclient/Annotations.java
@@ -56,4 +56,12 @@
   @Target({FIELD, PARAMETER, METHOD})
   @Retention(RUNTIME)
   public @interface CoordinatorBEncryptionKeyServiceBaseUrl {}
+
+  /**
+   * TTL for private key cache. To be used only for load testing and should not be used by clients.
+   */
+  @BindingAnnotation
+  @Target({FIELD, PARAMETER, METHOD})
+  @Retention(RUNTIME)
+  public @interface DecrypterCacheEntryTtlSec {}
 }
diff --git a/java/com/google/scp/operator/cpio/cryptoclient/MultiPartyDecryptionKeyServiceImpl.java b/java/com/google/scp/operator/cpio/cryptoclient/MultiPartyDecryptionKeyServiceImpl.java
index d4cd66d..e72ca30 100644
--- a/java/com/google/scp/operator/cpio/cryptoclient/MultiPartyDecryptionKeyServiceImpl.java
+++ b/java/com/google/scp/operator/cpio/cryptoclient/MultiPartyDecryptionKeyServiceImpl.java
@@ -36,6 +36,7 @@
 import com.google.scp.coordinator.protos.keymanagement.shared.api.v1.KeyDataProto.KeyData;
 import com.google.scp.operator.cpio.cryptoclient.Annotations.CoordinatorAAead;
 import com.google.scp.operator.cpio.cryptoclient.Annotations.CoordinatorBAead;
+import com.google.scp.operator.cpio.cryptoclient.Annotations.DecrypterCacheEntryTtlSec;
 import com.google.scp.operator.cpio.cryptoclient.EncryptionKeyFetchingService.EncryptionKeyFetchingServiceException;
 import com.google.scp.operator.cpio.cryptoclient.model.ErrorReason;
 import com.google.scp.shared.api.exception.ServiceException;
@@ -56,24 +57,13 @@
 public final class MultiPartyDecryptionKeyServiceImpl implements DecryptionKeyService {

   private static final int MAX_CACHE_SIZE = 100;
-  private static final long CACHE_ENTRY_TTL_SEC = 3600;
+  private final long decrypterCacheEntryTtlSec;
   private static final int CONCURRENCY_LEVEL = Runtime.getRuntime().availableProcessors();
   private final CloudAeadSelector coordinatorAAeadService;
   private final CloudAeadSelector coordinatorBAeadService;
   private final EncryptionKeyFetchingService coordinatorAEncryptionKeyFetchingService;
   private final EncryptionKeyFetchingService coordinatorBEncryptionKeyFetchingService;
-  private final LoadingCache<String, HybridDecrypt> decypterCache =
-      CacheBuilder.newBuilder()
-          .maximumSize(MAX_CACHE_SIZE)
-          .expireAfterWrite(CACHE_ENTRY_TTL_SEC, TimeUnit.SECONDS)
-          .concurrencyLevel(CONCURRENCY_LEVEL)
-          .build(
-              new CacheLoader<String, HybridDecrypt>() {
-                @Override
-                public HybridDecrypt load(final String keyId) throws KeyFetchException {
-                  return createDecrypter(keyId);
-                }
-              });
+  private final LoadingCache<String, HybridDecrypt> decrypterCache;

   /** Creates a new instance of the {@code MultiPartyDecryptionKeyServiceImpl} class. */
   @Inject
@@ -83,18 +73,30 @@
       @CoordinatorBEncryptionKeyFetchingService
           EncryptionKeyFetchingService coordinatorBEncryptionKeyFetchingService,
       @CoordinatorAAead CloudAeadSelector coordinatorAAeadService,
-      @CoordinatorBAead CloudAeadSelector coordinatorBAeadService) {
+      @CoordinatorBAead CloudAeadSelector coordinatorBAeadService, @DecrypterCacheEntryTtlSec long decrypterCacheEntryTtlSec) {
     this.coordinatorAEncryptionKeyFetchingService = coordinatorAEncryptionKeyFetchingService;
     this.coordinatorBEncryptionKeyFetchingService = coordinatorBEncryptionKeyFetchingService;
     this.coordinatorAAeadService = coordinatorAAeadService;
     this.coordinatorBAeadService = coordinatorBAeadService;
+    this.decrypterCacheEntryTtlSec = decrypterCacheEntryTtlSec;
+    this.decrypterCache = CacheBuilder.newBuilder()
+        .maximumSize(MAX_CACHE_SIZE)
+        .expireAfterWrite(this.decrypterCacheEntryTtlSec, TimeUnit.SECONDS)
+        .concurrencyLevel(CONCURRENCY_LEVEL)
+        .build(
+            new CacheLoader<String, HybridDecrypt>() {
+              @Override
+              public HybridDecrypt load(final String keyId) throws KeyFetchException {
+                return createDecrypter(keyId);
+              }
+            });
   }

   /** Returns the decrypter for the provided key. */
   @Override
   public HybridDecrypt getDecrypter(String keyId) throws KeyFetchException {
     try {
-      return decypterCache.get(keyId);
+      return decrypterCache.get(keyId);
     } catch (ExecutionException | UncheckedExecutionException e) {
       ErrorReason reason = ErrorReason.UNKNOWN_ERROR;
       if (e.getCause() instanceof KeyFetchException) {
diff --git a/javatests/com/google/scp/operator/cpio/cryptoclient/MultiPartyDecryptionKeyServiceImplTest.java b/javatests/com/google/scp/operator/cpio/cryptoclient/MultiPartyDecryptionKeyServiceImplTest.java
index 89f59ca..4dc7e46 100644
--- a/javatests/com/google/scp/operator/cpio/cryptoclient/MultiPartyDecryptionKeyServiceImplTest.java
+++ b/javatests/com/google/scp/operator/cpio/cryptoclient/MultiPartyDecryptionKeyServiceImplTest.java
@@ -68,6 +68,8 @@
   private MockTinkUtils mockTinkUtils;
   private MultiPartyDecryptionKeyServiceImpl multiPartyDecryptionKeyServiceImpl;

+  private long decrypterCacheEntryTtlSec = 3600;
+
   @Before
   public void setup() throws Exception {
     mockTinkUtils = new MockTinkUtils();
@@ -76,7 +78,8 @@
             coordinatorAKeyFetchingService,
             coordinatorBKeyFetchingService,
             aeadServicePrimary,
-            aeadServiceSecondary);
+            aeadServiceSecondary,
+            decrypterCacheEntryTtlSec);
   }

   @Test
